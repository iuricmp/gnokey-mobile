syntax = "proto3";

package land.gno.gnokey_mobile.v1;

import "gnonativetypes.proto";

option go_package = "github.com/gnolang/gnokey-mobile/api/gen/go";
option objc_class_prefix = "RTG";

// GnokeyMobileService is the service for dapps to interact with Gnokey Mobile
service GnokeyMobileService {
  // Get the connection address for the remote node as configured by the Gnokey Mobile app
  rpc GetRemote(land.gno.gnonative.v1.GetRemoteRequest) returns (land.gno.gnonative.v1.GetRemoteResponse);

  // Get the information for all keys in the keybase
  rpc ListKeyInfo(land.gno.gnonative.v1.ListKeyInfoRequest) returns (land.gno.gnonative.v1.ListKeyInfoResponse);

  // Sign the transaction using the account with the given address.
  // If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  rpc SignTx(land.gno.gnonative.v1.SignTxRequest) returns (land.gno.gnonative.v1.SignTxResponse);
}

// The ErrCode enum defines errors for gRPC API functions. These are converted
// from the Go error types returned by gnoclient.
enum ErrCode {
  //----------------
  // Special errors
  //----------------

  // Undefined is the default value. It should never be set manually
  Undefined = 0;

  // TODO indicates that you plan to create an error later
  TODO = 1;
  // ErrNotImplemented indicates that a method is not implemented yet
  ErrNotImplemented = 2;
  // ErrInternal indicates an unknown error (without Code), i.e. in gRPC
  ErrInternal = 3;

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
  ErrInitService = 105;
  ErrRunGRPCServer = 153;
}

message ErrDetails {
  repeated ErrCode codes = 1;
}
