// @generated by protoc-gen-es v2.0.0
// @generated from file gnokey_mobile_rpc.proto (package land.gno.gnokey_mobile.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { GetRemoteRequestSchema, GetRemoteResponseSchema, ListKeyInfoRequestSchema, ListKeyInfoResponseSchema, SignTxRequestSchema, SignTxResponseSchema } from "./gnonativetypes_pb";

/**
 * Describes the file gnokey_mobile_rpc.proto.
 */
export declare const file_gnokey_mobile_rpc: GenFile;

/**
 * @generated from message land.gno.gnokey_mobile.v1.ErrDetails
 */
export declare type ErrDetails = Message<"land.gno.gnokey_mobile.v1.ErrDetails"> & {
  /**
   * @generated from field: repeated land.gno.gnokey_mobile.v1.ErrCode codes = 1;
   */
  codes: ErrCode[];
};

/**
 * Describes the message land.gno.gnokey_mobile.v1.ErrDetails.
 * Use `create(ErrDetailsSchema)` to create a new message.
 */
export declare const ErrDetailsSchema: GenMessage<ErrDetails>;

/**
 * The ErrCode enum defines errors for gRPC API functions. These are converted
 * from the Go error types returned by gnoclient.
 *
 * ----------------
 * Special errors
 * ----------------
 *
 * @generated from enum land.gno.gnokey_mobile.v1.ErrCode
 */
export enum ErrCode {
  /**
   * Undefined is the default value. It should never be set manually
   *
   * @generated from enum value: Undefined = 0;
   */
  Undefined = 0,

  /**
   * TODO indicates that you plan to create an error later
   *
   * @generated from enum value: TODO = 1;
   */
  TODO = 1,

  /**
   * ErrNotImplemented indicates that a method is not implemented yet
   *
   * @generated from enum value: ErrNotImplemented = 2;
   */
  ErrNotImplemented = 2,

  /**
   * ErrInternal indicates an unknown error (without Code), i.e. in gRPC
   *
   * @generated from enum value: ErrInternal = 3;
   */
  ErrInternal = 3,

  /**
   * @generated from enum value: ErrInvalidInput = 100;
   */
  ErrInvalidInput = 100,

  /**
   * @generated from enum value: ErrBridgeInterrupted = 101;
   */
  ErrBridgeInterrupted = 101,

  /**
   * @generated from enum value: ErrMissingInput = 102;
   */
  ErrMissingInput = 102,

  /**
   * @generated from enum value: ErrSerialization = 103;
   */
  ErrSerialization = 103,

  /**
   * @generated from enum value: ErrDeserialization = 104;
   */
  ErrDeserialization = 104,

  /**
   * @generated from enum value: ErrInitService = 105;
   */
  ErrInitService = 105,

  /**
   * @generated from enum value: ErrRunGRPCServer = 153;
   */
  ErrRunGRPCServer = 153,
}

/**
 * Describes the enum land.gno.gnokey_mobile.v1.ErrCode.
 */
export declare const ErrCodeSchema: GenEnum<ErrCode>;

/**
 * GnokeyMobileService is the service for dapps to interact with Gnokey Mobile
 *
 * @generated from service land.gno.gnokey_mobile.v1.GnokeyMobileService
 */
export declare const GnokeyMobileService: GenService<{
  /**
   * Get the connection address for the remote node as configured by the Gnokey Mobile app
   *
   * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.GetRemote
   */
  getRemote: {
    methodKind: "unary";
    input: typeof GetRemoteRequestSchema;
    output: typeof GetRemoteResponseSchema;
  },
  /**
   * Get the information for all keys in the keybase
   *
   * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.ListKeyInfo
   */
  listKeyInfo: {
    methodKind: "unary";
    input: typeof ListKeyInfoRequestSchema;
    output: typeof ListKeyInfoResponseSchema;
  },
  /**
   * Sign the transaction using the account with the given address.
   * If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
   * If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
   *
   * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.SignTx
   */
  signTx: {
    methodKind: "unary";
    input: typeof SignTxRequestSchema;
    output: typeof SignTxResponseSchema;
  },
}>;

