// @generated by protoc-gen-connect-es v1.4.0
// @generated from file gnokey_mobile_rpc.proto (package land.gno.gnokey_mobile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetRemoteRequest, GetRemoteResponse, ListKeyInfoRequest, ListKeyInfoResponse, SignTxRequest, SignTxResponse } from "./gnonativetypes_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * GnokeyMobileService is the service for dapps to interact with Gnokey Mobile
 *
 * @generated from service land.gno.gnokey_mobile.v1.GnokeyMobileService
 */
export declare const GnokeyMobileService: {
  readonly typeName: "land.gno.gnokey_mobile.v1.GnokeyMobileService",
  readonly methods: {
    /**
     * Get the connection address for the remote node as configured by the Gnokey Mobile app
     *
     * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.GetRemote
     */
    readonly getRemote: {
      readonly name: "GetRemote",
      readonly I: typeof GetRemoteRequest,
      readonly O: typeof GetRemoteResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Get the information for all keys in the keybase
     *
     * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.ListKeyInfo
     */
    readonly listKeyInfo: {
      readonly name: "ListKeyInfo",
      readonly I: typeof ListKeyInfoRequest,
      readonly O: typeof ListKeyInfoResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sign the transaction using the account with the given address.
     * If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
     * If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
     *
     * @generated from rpc land.gno.gnokey_mobile.v1.GnokeyMobileService.SignTx
     */
    readonly signTx: {
      readonly name: "SignTx",
      readonly I: typeof SignTxRequest,
      readonly O: typeof SignTxResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

