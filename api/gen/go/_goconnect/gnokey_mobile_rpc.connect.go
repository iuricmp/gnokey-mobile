// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gnokey_mobile_rpc.proto

package _goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/gnolang/gnokey-mobile/api/gen/go"
	_go1 "github.com/gnolang/gnonative/api/gen/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GnokeyMobileServiceName is the fully-qualified name of the GnokeyMobileService service.
	GnokeyMobileServiceName = "land.gno.gnokey_mobile.v1.GnokeyMobileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GnokeyMobileServiceGetRemoteProcedure is the fully-qualified name of the GnokeyMobileService's
	// GetRemote RPC.
	GnokeyMobileServiceGetRemoteProcedure = "/land.gno.gnokey_mobile.v1.GnokeyMobileService/GetRemote"
	// GnokeyMobileServiceListKeyInfoProcedure is the fully-qualified name of the GnokeyMobileService's
	// ListKeyInfo RPC.
	GnokeyMobileServiceListKeyInfoProcedure = "/land.gno.gnokey_mobile.v1.GnokeyMobileService/ListKeyInfo"
	// GnokeyMobileServiceSignTxProcedure is the fully-qualified name of the GnokeyMobileService's
	// SignTx RPC.
	GnokeyMobileServiceSignTxProcedure = "/land.gno.gnokey_mobile.v1.GnokeyMobileService/SignTx"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gnokeyMobileServiceServiceDescriptor           = _go.File_gnokey_mobile_rpc_proto.Services().ByName("GnokeyMobileService")
	gnokeyMobileServiceGetRemoteMethodDescriptor   = gnokeyMobileServiceServiceDescriptor.Methods().ByName("GetRemote")
	gnokeyMobileServiceListKeyInfoMethodDescriptor = gnokeyMobileServiceServiceDescriptor.Methods().ByName("ListKeyInfo")
	gnokeyMobileServiceSignTxMethodDescriptor      = gnokeyMobileServiceServiceDescriptor.Methods().ByName("SignTx")
)

// GnokeyMobileServiceClient is a client for the land.gno.gnokey_mobile.v1.GnokeyMobileService
// service.
type GnokeyMobileServiceClient interface {
	// Get the connection address for the remote node as configured by the Gnokey Mobile app
	GetRemote(context.Context, *connect.Request[_go1.GetRemoteRequest]) (*connect.Response[_go1.GetRemoteResponse], error)
	// Get the information for all keys in the keybase
	ListKeyInfo(context.Context, *connect.Request[_go1.ListKeyInfoRequest]) (*connect.Response[_go1.ListKeyInfoResponse], error)
	// Sign the transaction using the active account.
	// If no active account has been set with SelectAccount, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SignTx(context.Context, *connect.Request[_go1.SignTxRequest]) (*connect.Response[_go1.SignTxResponse], error)
}

// NewGnokeyMobileServiceClient constructs a client for the
// land.gno.gnokey_mobile.v1.GnokeyMobileService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGnokeyMobileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GnokeyMobileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gnokeyMobileServiceClient{
		getRemote: connect.NewClient[_go1.GetRemoteRequest, _go1.GetRemoteResponse](
			httpClient,
			baseURL+GnokeyMobileServiceGetRemoteProcedure,
			connect.WithSchema(gnokeyMobileServiceGetRemoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listKeyInfo: connect.NewClient[_go1.ListKeyInfoRequest, _go1.ListKeyInfoResponse](
			httpClient,
			baseURL+GnokeyMobileServiceListKeyInfoProcedure,
			connect.WithSchema(gnokeyMobileServiceListKeyInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signTx: connect.NewClient[_go1.SignTxRequest, _go1.SignTxResponse](
			httpClient,
			baseURL+GnokeyMobileServiceSignTxProcedure,
			connect.WithSchema(gnokeyMobileServiceSignTxMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gnokeyMobileServiceClient implements GnokeyMobileServiceClient.
type gnokeyMobileServiceClient struct {
	getRemote   *connect.Client[_go1.GetRemoteRequest, _go1.GetRemoteResponse]
	listKeyInfo *connect.Client[_go1.ListKeyInfoRequest, _go1.ListKeyInfoResponse]
	signTx      *connect.Client[_go1.SignTxRequest, _go1.SignTxResponse]
}

// GetRemote calls land.gno.gnokey_mobile.v1.GnokeyMobileService.GetRemote.
func (c *gnokeyMobileServiceClient) GetRemote(ctx context.Context, req *connect.Request[_go1.GetRemoteRequest]) (*connect.Response[_go1.GetRemoteResponse], error) {
	return c.getRemote.CallUnary(ctx, req)
}

// ListKeyInfo calls land.gno.gnokey_mobile.v1.GnokeyMobileService.ListKeyInfo.
func (c *gnokeyMobileServiceClient) ListKeyInfo(ctx context.Context, req *connect.Request[_go1.ListKeyInfoRequest]) (*connect.Response[_go1.ListKeyInfoResponse], error) {
	return c.listKeyInfo.CallUnary(ctx, req)
}

// SignTx calls land.gno.gnokey_mobile.v1.GnokeyMobileService.SignTx.
func (c *gnokeyMobileServiceClient) SignTx(ctx context.Context, req *connect.Request[_go1.SignTxRequest]) (*connect.Response[_go1.SignTxResponse], error) {
	return c.signTx.CallUnary(ctx, req)
}

// GnokeyMobileServiceHandler is an implementation of the
// land.gno.gnokey_mobile.v1.GnokeyMobileService service.
type GnokeyMobileServiceHandler interface {
	// Get the connection address for the remote node as configured by the Gnokey Mobile app
	GetRemote(context.Context, *connect.Request[_go1.GetRemoteRequest]) (*connect.Response[_go1.GetRemoteResponse], error)
	// Get the information for all keys in the keybase
	ListKeyInfo(context.Context, *connect.Request[_go1.ListKeyInfoRequest]) (*connect.Response[_go1.ListKeyInfoResponse], error)
	// Sign the transaction using the active account.
	// If no active account has been set with SelectAccount, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SignTx(context.Context, *connect.Request[_go1.SignTxRequest]) (*connect.Response[_go1.SignTxResponse], error)
}

// NewGnokeyMobileServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGnokeyMobileServiceHandler(svc GnokeyMobileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gnokeyMobileServiceGetRemoteHandler := connect.NewUnaryHandler(
		GnokeyMobileServiceGetRemoteProcedure,
		svc.GetRemote,
		connect.WithSchema(gnokeyMobileServiceGetRemoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gnokeyMobileServiceListKeyInfoHandler := connect.NewUnaryHandler(
		GnokeyMobileServiceListKeyInfoProcedure,
		svc.ListKeyInfo,
		connect.WithSchema(gnokeyMobileServiceListKeyInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gnokeyMobileServiceSignTxHandler := connect.NewUnaryHandler(
		GnokeyMobileServiceSignTxProcedure,
		svc.SignTx,
		connect.WithSchema(gnokeyMobileServiceSignTxMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/land.gno.gnokey_mobile.v1.GnokeyMobileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GnokeyMobileServiceGetRemoteProcedure:
			gnokeyMobileServiceGetRemoteHandler.ServeHTTP(w, r)
		case GnokeyMobileServiceListKeyInfoProcedure:
			gnokeyMobileServiceListKeyInfoHandler.ServeHTTP(w, r)
		case GnokeyMobileServiceSignTxProcedure:
			gnokeyMobileServiceSignTxHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGnokeyMobileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGnokeyMobileServiceHandler struct{}

func (UnimplementedGnokeyMobileServiceHandler) GetRemote(context.Context, *connect.Request[_go1.GetRemoteRequest]) (*connect.Response[_go1.GetRemoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnokey_mobile.v1.GnokeyMobileService.GetRemote is not implemented"))
}

func (UnimplementedGnokeyMobileServiceHandler) ListKeyInfo(context.Context, *connect.Request[_go1.ListKeyInfoRequest]) (*connect.Response[_go1.ListKeyInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnokey_mobile.v1.GnokeyMobileService.ListKeyInfo is not implemented"))
}

func (UnimplementedGnokeyMobileServiceHandler) SignTx(context.Context, *connect.Request[_go1.SignTxRequest]) (*connect.Response[_go1.SignTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnokey_mobile.v1.GnokeyMobileService.SignTx is not implemented"))
}
